[gcode_macro HEATSOAK]
gcode:
  M106 S255
  M190 S110

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions).
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    
[gcode_macro LIGHT_TEST]
gcode:
  {% set white_value = 0.15 %}
  {% for i in range(0, 13) %}
    {% if white_value <= 1 %}
      {% set white_value = 0.3 + i * 0.05 %}
      SET_LED LED=Vertical_bed_lights WHITE={white_value}
      G4 P5
    {% endif %}
  {% endfor %}

[gcode_macro HOUR_COUNTER]
gcode:
  {% set BOOL = params.BOOL %}
  {% if BOOL == "ON" %}
    SET_PIN PIN=_hour_counter VALUE=1
  {% else %}
    SET_PIN PIN=_hour_counter VALUE=0
  {% endif %}
  
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro MOVE_TO_PURGE_STOPPER]
gcode:
  _CG28
  G90
  G0 Z5 F5000
  G0 X-3.5 Y23.50 F15000
  G0 Z1 F2500
  
#	macro to level bed to the gantry
[gcode_macro SQUARE_BED_TO_MACHINE]
gcode:
	Z_TILT_ADJUST	;adjust bed so its square to gantry
    
[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "PC+ABS"    : ( 1.15, 2.20 ),  # 1.50 - 2.20
        "ABS"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.07, 2.10 ),  # 1.30 - 2.10
        "PA6"       : ( 1.12, 2.50 ),  # 2.00 - 2.50
        "PA"        : ( 1.15, 2.50 ),  # 2.00 - 2.50
        "PC"        : ( 1.20, 1.90 ),  # 1.10 - 1.90
        "TPU"       : ( 1.21, 2.00 ),  # 1.50 - 2.00
        "TPU-90A"   : ( 1.15, 2.00 ),  # 1.50 - 2.00
        "TPU-95A"   : ( 1.22, 2.00 ),  # 1.50 - 2.00
        "ABS-CF"    : ( 1.11, 2.40 ),  # 1.25 - 2.40
        "ASA-CF"    : ( 1.11, 2.10 ),  # 1.30 - 2.10
        "PA6-CF"    : ( 1.19, 2.50 ),  # 2.00 - 2.50
        "PC+ABS-CF" : ( 1.22, 2.20 ),  # 1.50 - 2.20
        "PC+CF"     : ( 1.36, 1.90 ),  # 1.10 - 1.90
        "PLA-CF"    : ( 1.29, 2.20 ),  # 1.80 - 2.20
        "PETG-CF"   : ( 1.30, 2.20 ),  # 1.70 - 2.20
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    {% set extruder_config = printer.configfile.settings[heater] %}

    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}

        RESPOND PREFIX=ðŸ”¥ MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=ðŸ”¥ MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}
    
#	combined print start gcode macro that takes into account temperature from the slicer
[gcode_macro PRINT_START]
# params:
#   EXTRUDER
gcode:
    SET_LED LED=Vertical_bed_lights WHITE=.15
    {% set EXTRUDER = params.EXTRUDER|default(215) %}
    {% set BED = params.BED|default(60) %}
    _SET_MPC_MATERIAL HEATER=extruder MATERIAL={params.MATERIAL}
    HOUR_COUNTER BOOL=ON
    M104 S180
	M107 #turn cooling fans off
    G28
	G21  # set units to mm
	G90  # use absolute coordinates
	M83	# use relative extrusion
    G1 Z15 F9000
    M190 S{BED}			;set bed temperature and wait
    #WAIT_FOR_BED_EDGE_TEMP BED={BED} MINIMUM_TEMP_THRESHOLD=0.8 BOUND=50
    G28
    Z_TILT_ADJUST
    BED_MESH_CALIBRATE
    GO_TO_PURGE_LOCATION
    M109 S{EXTRUDER}		;set hotend temperature and wait
    WIPE_NOZZLE
    G4 P5000
    G1 Z5 F9000
    _SEQUENTIAL_PURGE	;draw prime line in corner of bed

	
[gcode_macro PRIME_LINE]
gcode:
	G1 Z20 F6000
	G1 X20 Y40 F12000
	G1 Z0.5 F600
	G1 Y105 E10 F1000
	G1 Y115 E2.5 F1000
	G92 E0.0             ;set extruder to Zero
    G92 Z0.5             ;let printer know its at 0.5
    G90                  ;set to absolute

#    Use print_end for you slicer ending script    
[gcode_macro PRINT_END]
gcode:
	G91  							#relative positioning
	G0 E-0.3 F4800  				#retract 0.3mm of filament
	G0 Z+1.00 X-2 Y-2 F6000  		#short quick move to disengage from print
	G0 Z+5.00  F6000  				#move Z-Axis 1mm away from part

	G90  					#absolute positioning
	G0 X150 Y150 				#move gantry close to xy min, by nozzle switch in front
	G91  					#relative positioning
	#G0 E10 F400			#extrude filament to get better blob on end
	#G0 E-0.3 F1800  		#retract additional filament to move out of melt zone
	G90 					#absolute positioning

	M104 S0  				#turn off hotend
	M140 S0  				#turn off heatbed
    
	#z bed placement control for end of print
    SAVE_GCODE_STATE NAME=END_state
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 130|float %}    #if z position >= 130mnm do the following
        G91              #relative positioning
        G1 Z+10 F600     #move z down 10mm
        G90              #absolute positioning
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z130 F600     #move z to 130mm
    {% endif %}
    RESTORE_GCODE_STATE NAME=END_state
    SET_LED LED=Vertical_bed_lights WHITE=1

	M106 S0  				#shut off part cooling fans
	#M84					#turn off motors
	clear_pause				#clear pause state encase it was enabled
    HOUR_COUNTER BOOL=OFF
#	Macro to execute when pausing printer
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    SET_LED LED=Vertical_bed_lights WHITE=1
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
    {% set y_park = printer.toolhead.axis_minimum.y|float + 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

#	Macro to execute when resuming printer
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    SET_LED LED=Vertical_bed_lights WHITE=.15
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

#	Macro to execute when canceling a print
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    PRINT_END #execute the print end macro
	CLEAR_PAUSE
  	SDCARD_RESET_FILE
  	BASE_CANCEL_PRINT
    HOUR_COUNTER BOOL=OFF
[gcode_macro UNLOAD_FILAMENT]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Unload Filament"
    RESPOND TYPE=command MSG="action:prompt_text What type of filament do you want to unload?"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button ASA|UNLOAD_FILAMENT_SLAVE TYPE=ASA|primary"
    RESPOND TYPE=command MSG="action:prompt_button ABS|UNLOAD_FILAMENT_SLAVE TYPE=ABS|primary"
    RESPOND TYPE=command MSG="action:prompt_button PLA|UNLOAD_FILAMENT_SLAVE TYPE=PLA|primary"
    RESPOND TYPE=command MSG="action:prompt_button PETG|UNLOAD_FILAMENT_SLAVE TYPE=PETG|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _NOZZLE_WIPER_VARIABLES]
# the values below are for a wiper located at (-8, 125)
variable_purge_x:       -8  # x PURGE location
variable_purge_y:       160 # y PURGE location
variable_purge_x_entry: 0   # x entry location before going to the PURGE location
variable_purge_y_entry: 160 # y entry location before going to the PURGE location
variable_wipe_dx:       0   # distance to move in x from the PURGE position in order to wipe
variable_wipe_dy:       15  # distance to move in y from the PURGE position in order to wipe
variable_wipe_count:    3   # number of wipe cycles
variable_travel_speed:  300 # how fast travel speeds will be performed
variable_entry_speed:   100 # how fast to move from the entry location to the PURGE location
variable_wipe_speed:    50  # how fast to move when wiping
variable_purge_speed:   7   # how fast to extrude in mm/s when purging
variable_purge_fan:     64  # default fan speed out of 255 when purging
variable_wipe_fan:      128 # default fan speed out of 255 when wiping
gcode:


[gcode_macro UNLOAD_FILAMENT_SLAVE]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
    {% set TYPE = params.TYPE | default("ASA") %}
    {% set temps = {
        "ASA": 270,
        "ABS": 270,  
        "PLA": 230,
        "PETG": 245,
    } %}
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
	G91
    _CG28
    M104 S{temps[TYPE]}
    GO_TO_PURGE_LOCATION
	# Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
	M109 S{temps[TYPE]}
	{% set unload_speed = 5 * 60 %}
	{% set unload_length = 130 %}
	M117 Unloading filament...
    M83
	# Extrude a bit
	G0 E10 F300
	# Extract filament to cold end area 
	G0 E-5 F3600
	# Wait for three seconds
	G4 P3000
	# Push back the filament to smash any stringing 
	G0 E5 F3600
	# Extract back fast in to the cold zone 
	G0 E-15 F3600
	# Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
	G0 E-{unload_length} F{unload_speed}
    M106 S255
    G4 P2500
    M106 S0
    NOZZLE_CLEAN
	M117 Filament unloaded!
	RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Load Filament"
    RESPOND TYPE=command MSG="action:prompt_text What type of filament do you want to load?"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button ASA|LOAD_FILAMENT_SLAVE TYPE=ASA|primary"
    RESPOND TYPE=command MSG="action:prompt_button ABS|LOAD_FILAMENT_SLAVE TYPE=ABS|primary"
    RESPOND TYPE=command MSG="action:prompt_button PLA|LOAD_FILAMENT_SLAVE TYPE=PLA|primary"
    RESPOND TYPE=command MSG="action:prompt_button PETG|LOAD_FILAMENT_SLAVE TYPE=PETG|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"
[gcode_macro LOAD_FILAMENT_SLAVE]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
    {% set TYPE = params.TYPE | default("ASA") %}
    {% set temps = {
        "ASA": 270,
        "ABS": 270,  
        "PLA": 230,
        "PETG": 245,
    } %}
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
	G91
    # Heat nozzle before potenitally homing.
    M104 S{temps[TYPE]}
    _CG28
    GO_TO_PURGE_LOCATION
	# Wait for nozzle to heat up. 
	M109 S{temps[TYPE]}
    # Relative Positioning
    M83 
	# Load the filament into the hotend area.
	G0 E100 F600
	# Wait a second
	G4 P1000
	# Purge
	G0 E40 F100
	RESPOND MSG="Filament loaded!"
    WIPE_NOZZLE
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT
    
#	Scrubs the nozzle on the brass brush or silicone wiper located in the build chamber
[gcode_macro NOZZLE_CLEAN]
gcode:
	WIPE_NOZZLE

#   Move above the PURGE bucket
[gcode_macro GO_TO_PURGE_LOCATION]
gcode:
    {% set Px = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].purge_x|float %}
    {% set Py = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].purge_y|float %}
    {% set Pxe = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].purge_y_entry|float %}
    {% set St = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].travel_speed * 60 %}
    {% set Se = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].entry_speed * 60 %}
    
    G90

    {% if not (printer.toolhead.position.x == Px and printer.toolhead.position.y == Py) %}
        G1 X{Pxe} Y{Pye} F{St}
        G1 X{Px} Y{Py} F{Se}
    {% endif %}

#   Wipe the nozzle on the brass brush or silicone wiper
[gcode_macro WIPE_NOZZLE]
# params:
#   OLD_FAN_SPEED
gcode:
    {% set OLD_FAN_SPEED = params.OLD_FAN_SPEED|default(-1)|int %}
    {% set Px = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].purge_x|float %}
    {% set Py = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].purge_y|float %}
    {% set Pxe = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].purge_y_entry|float %}
    {% set Wdx = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].wipe_dx|float %}
    {% set Wdy = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].wipe_dy|float %}
    {% set Wc = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].wipe_count|int %}
    {% set Se = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].entry_speed * 60 %}
    {% set Sw = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].wipe_speed * 60 %}
    {% set Sf = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].wipe_fan %}
    {% set IS_PURGE = params.IS_PURGE | default(0) %}
    
    # {% if OLD_FAN_SPEED == -2 %}
    #     {% set old_Sf = printer.fan.speed %}
    # {% else %}
    #     {% set old_Sf = OLD_FAN_SPEED %}
    # {% endif %}
    
    # {% if printer.fan.speed < Sf %}
    #     {% set wait_for_fan = True %}
    # {% else %}
    #     {% set wait_for_fan = False %}
    # {% endif %}

    # G90

    # # go to PURGE location
    GO_TO_PURGE_LOCATION

    # # set fan speed for wiping
    # M106 S{Sf}
    
    # # wait for fan to cool filament if needed
    # {% if wait_for_fan %}
    #     G4 P800
    # {% endif %}
    # G1 E-1 F300 ; retrack more
    # wipe nozzle
    # G91
    # G1 Y3 F15000
    # G1 Y-6 F15000
    # G1 Y6 F15000
    # G1 Y-6 F15000
    # G1 Y6 F15000
    # G1 Y-6 F15000
    # G1 Y6 F15000
    # G90
    G1 Y142 F15000
    G1 X{Px + Wdx} Y{Py + Wdy} F12000
    {% for i in range(Wc) %}
        G1 X{Px} Y{Py} F5000
        G1 X{Px + Wdx} Y{Py + Wdy} F15000
    {% endfor %}
    {% if IS_PURGE != 1 %}
      # move away from wiper
      G1 X{Pxe + Wdx} Y{Pye + Wdy} F18000
    {% endif %}
    MOVE_TO_PURGE_STOPPER
    M106 S255
    # # restore fan speed
    # M106 S{old_Sf}


#   PURGE material into the bucket
[gcode_macro PURGE]
description: Extrude into the PURGE bucket and wipe the nozzle
# params:
#   EXACT_TEMP:     whether to cool to specified temperature if already above it
#   TEMPERATURE:    minimum extruder temperature before purging
#   FEED_AMOUNT:    length of material in mm to PURGE
#   MAX_FEED:       max extrude length for a single PURGE strip. Set to -1 to disable length limit.
gcode:
    {% set EXACT_TEMP = params.EXACT_TEMP|default(False) %}
    {% set TEMPERATURE = params.TEMPERATURE|default(270.0)|float %}
    {% set FEED_AMOUNT = params.FEED_AMOUNT|default(5)|float %}
    {% set MAX_FEED = params.MAX_FEED|default(8.0)|float %}

    {% set Sp = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].purge_speed * 60 %}
    {% set Sf = printer["gcode_macro _NOZZLE_WIPER_VARIABLES"].purge_fan %}
    {% set old_Sf = printer.fan.speed %}

    # make sure FEED_AMOUNT is at least 3 to avoid negative E movements
    {% if FEED_AMOUNT < 3 %}
        {% set FEED_AMOUNT = 3 %}
    {% endif %}
    
    # go to PURGE location
    GO_TO_PURGE_LOCATION

    # wait for hotend
    {% if EXACT_TEMP|lower == 'true' or printer.extruder.temperature < TEMPERATURE %}
        M109 S{TEMPERATURE}
    {% endif %}

    M83      ; relative mode
    G1 E15 F150
    G1 E-3 F750
    G4 P{1 * 1000}
    G92 E0   ; reset extruder
    # wipe the nozzle
    WIPE_NOZZLE OLD_FAN_SPEED={old_Sf}

#	Macro for M600 - filament out pause resume 
[gcode_macro M600]
# params:
#   X
#   Y
#   Z
gcode:
    {% set X = params.X|default(40) %}
    {% set Y = params.Y|default(40) %}
    {% set Z = params.Z|default(10) %}
	{% if printer.toolhead.status == "Ready" %}
		# do nothing
	{% else %}
    	M117 Filament Change
		SAVE_GCODE_STATE NAME=M600_state
    	PAUSE
		G91
		UNLOAD_FILAMENT
		RESTORE_GCODE_STATE NAME=M600_state
	{% endif %}

#	Use this command to load filament during a mid print filament swap	
[gcode_macro SWAP_RESUME] 
gcode:
 	M117 Printing...
	LOAD_FILAMENT
	RESUME

#	Redefine M204 gcode to properly accel_to_decel when called instead of keeping default through the print
[gcode_macro M204]
rename_existing: M204.1
gcode:

   {% if 'P' in params %}{% set accel = params.P %}{% endif %}
   {% if 'S' in params %}{% set accel = params.S %}{% endif %}
   {% if 'T' in params %}{% set accel = params.T %}{% endif %}

    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float / 2.0}